/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Layer Definitions

#define DEFAULT 0
#define NAV 1
#define MEDIA 2
#define NUM 3
#define SYM 4
#define FN 5

// Behavior configuration

&mt {
    tapping-term-ms = <500>;
    quick_tap_ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <500>;
    quick_tap_ms = <200>;
    flavor = "tap-preferred";
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default {
            // ----------------------------------------------------------------------------------------------------------------------
            // |       |   Q    |   W    |     E     |     R     |   T   | # |     Y     |     U    |    I    |    O   |   P    |  [  |
            // | LANG1 | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |   G   | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | ;/LGUI |  '  |
            // | LANG2 |   Z    | X/RALT |     C     |     V     |   B   | # |     N     |     M    |    ,    | ./RALT |   /    |  ]  |
            //                         | ESC/MEDIA | SPACE/NAV |  TAB  | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            bindings = <
&kp ESCAPE  &kp Q       &kp W       &kp E        &kp R        &kp T      &kp Y        &kp U        &kp I        &kp O         &kp P          &kp LBKT
&kp TAB     &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F  &kp G      &kp H        &mt LSHFT J  &mt LCTRL K  &mt LALT L    &mt LGUI SEMI  &kp SINGLE_QUOTE
&kp GLOBE   &kp Z       &mt RALT X  &kp C        &kp V        &kp B      &kp N        &kp M        &kp COMMA    &mt RALT DOT  &kp FSLH       &kp RBKT
                                    &lt 2 ESC    &lt 1 SPACE  &kp TAB    &lt 4 ENTER  &lt 3 BSPC   &lt 5 DEL
            >;
        };

        navigation {
            // -------------------------------------------------------------------------------------------
            // |     |      |      |       |       |     | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
            // |     | LGUI | LALT | LCTRL | LSHFT |     | # | LEFT  | DOWN | UP   | RIGHT | CAPS  |     |
            // |     |      | RALT |       |       |     | # | HOME  | PGDN | PGUP | END   | INS   |     |
            //                     |       | HELD  |     | # | ENTER | BSPC | DEL  |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp C_AC_REDO  &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_PASTE  &kp C_AC_UNDO  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT       &kp DOWN      &kp UP         &kp RIGHT       &kp CAPSLOCK   &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans    &kp HOME       &kp PG_DN     &kp PG_UP      &kp END         &kp INS        &trans
                            &trans     &trans     &trans    &kp ENTER      &kp BSPC      &kp DEL
            >;
        };

        media {
            // -----------------------------------------------------------------------------------------------------
            // |     |      |      |       |       |      | # | BOOTLOAD | EP_OFF | BR_D   | BR_U   | EP_ON  |     |
            // |     | LGUI | LALT | LCTRL | LSHFT |      | # | RESET    | PREV   | VOL_D  | VOL_U  | NEXT   |     |
            // |     |      | RALT |       |       |      | # | OUT_BLE  | BT_0   | BT_PRV | BT_NXT | BT_CLR |     |
            //                     | HELD  |       |      | # | STOP     | PLAY   | MUTE   |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &bootloader   &ext_power EP_OFF  &kt C_BRI_DN  &kt C_BRI_UP  &ext_power EP_ON  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &sys_reset    &kt C_PREV         &kt C_VOL_DN  &kt C_VOL_UP  &kt C_NEXT        &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans    &out OUT_BLE  &bt BT_SEL 0       &bt BT_PRV    &bt BT_NXT    &bt BT_CLR        &trans
                            &trans     &trans     &trans    &kt C_STOP    &kt C_PLAY         &kt C_MUTE
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------
            // |     |  [  |  7  |  8  |  9  |  ]  | # |     |       |       |      |      |     |
            // |     |  ;  |  4  |  5  |  6  |  =  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
            // |     |  `  |  1  |  2  |  3  |  \  | # |     |       |       | RALT |      |     |
            //                   |  .  |  0  |  -  | # |     | HELD  |       |

            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans     &trans     &kp RALT  &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS    &trans  &trans     &trans
            >;
        };

        symbols {
            // ------------------------------------------------------------------------------------
            // |     |  {  |  &  |  *  |  (  |  }  | # |      |       |       |      |      |     |
            // |     |  :  |  $  |  %  |  ^  |  +  | # |      | LSHFT | LCTRL | LALT | LGUI |     |
            // |     |  ~  |  !  |  @  |  #  |  |  | # |      |       |       | RALT |      |     |
            //                   |  (  |  )  |  _  | # | HELD |       |       |

            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS          &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE          &trans  &trans     &trans     &kp RALT  &trans    &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE    &trans  &trans     &trans
            >;
        };

        function {
            // ------------------------------------------------------------------------------------------
            // |     |  F12 |  F7  |  F8  |  F9   | PSCRN | # |     |       |       |      |      |     |
            // |     |  F11 |  F4  |  F5  |  F6   | SLCK  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
            // |     |  F10 |  F1  |  F2  |  F3   | PAUSE | # |     |       |       | RALT |      |     |
            //                     | ESC  | SPACE |  TAB  | # |     |       | HELD  |

            bindings = <
&trans      &kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN          &trans  &trans     &trans     &trans    &trans    &trans
&kp K_LOCK  &kp F11  &kp F4  &kp F5   &kp F6     &kp SLCK           &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans      &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK    &trans  &trans     &trans     &kp RALT  &trans    &trans
                             &kp ESC  &kp SPACE  &kp TAB            &trans  &trans     &trans
            >;
        };
    };
};
